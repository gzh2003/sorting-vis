{"version":3,"sources":["Algorithms/mergeSort.js","Algorithms/quickSort.js","Visualizer/Visualizer.jsx","Algorithms/bubbleSort.js","Algorithms/selectionSort.js","Algorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","g","i","j","push","doMerge","length","getQuickSortAnimations","quickSortHelper","pivotIndex","pivot","temp","partitionArray","algorithmList","selectedAlgorithm","animationSpeed","animationSpeedMS","numberOfBars","isSorting","colorList","primaryColor","themeMode","darkMode","Visualizer","props","setAlgorithm","e","target","value","document","getElementById","innerHTML","sup","console","log","forceUpdate","setAnimationSpeed","setNumberOfBars","randomizeArray","setPrimaryColor","setThemeMode","setIsSorting","state","visualizerArray","this","algorithm","bubbleSort","selectionSort","insertionSort","mergeSort","quickSort","min","max","random","setState","n","swapped","bubbleSortHelper","getBubbleSortAnimations","isColorChange","arrayBars","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","restoreTime","parseInt","minIndex","selectionSortHelper","getSelectionSortAnimations","insertionSortHelper","getInsertionSortAnimations","primaryThemeColor","primaryBackgroundColor","background","darkTheme","createMuiTheme","palette","type","lightTheme","theme","AppBar","position","Toolbar","Typography","variant","className","FormControl","disabled","Select","onChange","map","index","MenuItem","key","Switch","CssBaseline","Paper","elevation","width","Grid","container","item","sm","CardContent","align","Slider","valueLabelDisplay","CardActions","Button","onClick","sorter","id","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a641ec69.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIndex,\n    endIndex,\n    auxiliaryArray,\n    animations,\n) {\n    if (startIndex === endIndex) {\n        return;\n    }\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n    doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n    mainArray,\n    startIndex,\n    middleIndex,\n    endIndex,\n    auxiliaryArray,\n    animations,\n) {\n    let g = startIndex;\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while (i <= middleIndex && j <= endIndex) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push([g, auxiliaryArray[i]]);\n            mainArray[g++] = auxiliaryArray[i++];\n        } else {\n            animations.push([g, auxiliaryArray[j]]);\n            mainArray[g++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([g, auxiliaryArray[i]]);\n        mainArray[g++] = auxiliaryArray[i++];\n    }\n    while (j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([g, auxiliaryArray[j]]);\n        mainArray[g++] = auxiliaryArray[j++];\n    }\n}","export function getQuickSortAnimations(array) {\n    const animations = [];\n    quickSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n}\n\nfunction quickSortHelper(array, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(array, startIndex, endIndex, animations);\n        quickSortHelper(array, startIndex, pivotIndex - 1, animations);\n        quickSortHelper(array, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(array, startIndex, endIndex, animations) {\n    let pivot = array[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (array[i] <= pivot) {\n            animations.push([i, array[pivotIndex]]);\n            animations.push([pivotIndex, array[i]]);\n            let temp = array[i];\n            array[i] = array[pivotIndex];\n            array[pivotIndex] = temp;\n            pivotIndex++;\n        }\n        else {\n            animations.push([false, false]);\n            animations.push([false, false]);\n        }\n        animations.push([false, false]);\n        animations.push([false, false]);\n    }\n    animations.push([false, false]);\n    animations.push([false, false]);\n    animations.push([false, false]);\n    animations.push([false, false]);\n    animations.push([pivotIndex, array[endIndex]]);\n    animations.push([endIndex, array[pivotIndex]]);\n    let temp = array[pivotIndex];\n    array[pivotIndex] = array[endIndex];\n    array[endIndex] = temp;\n    return pivotIndex;\n}","import React from \"react\";\nimport \"./Visualizer.css\";\n\nimport { AppBar, Toolbar, Typography, Paper, Grid, CardContent, CardActions, Button, FormControl, Select, MenuItem, Slider, MuiThemeProvider, Switch, createMuiTheme, CssBaseline } from \"@material-ui/core\";\n\nimport { getBubbleSortAnimations } from \"../Algorithms/bubbleSort\";\nimport { getMergeSortAnimations } from \"../Algorithms/mergeSort\";\nimport { getQuickSortAnimations } from \"../Algorithms/quickSort\";\nimport { getInsertionSortAnimations } from \"../Algorithms/insertionSort\";\nimport { getSelectionSortAnimations } from \"../Algorithms/selectionSort\";\n\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst algorithmList = [\"Bubble Sort\", \"Selection Sort\", \"Insertion Sort\", \"Merge Sort\", \"Quick Sort\"];\nlet selectedAlgorithm = \"Bubble Sort\";\nlet animationSpeed = 100;\nlet animationSpeedMS = 1;\nlet numberOfBars = 150;\nlet isSorting = false;\nconst colorList = [\"DarkSlateBlue\", \"DarkSlateGray\", \"DodgerBlue\", \"Gold\", \"LightGreen\", \"LightSlateGray\", \"Orange\", \"Turquoise\"];\nlet primaryColor = \"DarkSlateBlue\";\nconst secondaryColor = \"#f50057\";\nlet themeMode = \"Light\";\nlet darkMode = false;\n\nexport default class Visualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visualizerArray: []\n        };\n    }\n\n    componentDidMount() {\n        this.randomizeArray();\n        document.getElementById(\"overview-title\").innerHTML = \"Bubble Sort\";\n        document.getElementById(\"overview-text\").innerHTML = \"Bubble sort is a simple sorting algorithm that repeatedly swaps adjacent elements if they are in the incorrect order, it is known as bubble sort, because with every complete iteration the largest element in the array, “bubbles up” towards the highest index of that array.\";\n        document.getElementById(\"overview-worst\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n        document.getElementById(\"overview-average\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n        document.getElementById(\"overview-best\").innerHTML = \"O(n)\";\n        document.getElementById(\"overview-space\").innerHTML = \"O(1)\";\n    }\n\n    sorter(algorithm) {\n        this.setIsSorting();\n        switch (algorithm) {\n            case \"Bubble Sort\": {\n                this.bubbleSort();\n                break;\n            }\n            case \"Selection Sort\": {\n                this.selectionSort();\n                break;\n            }\n            case \"Insertion Sort\": {\n                this.insertionSort();\n                break;\n            }\n            case \"Merge Sort\": {\n                this.mergeSort();\n                break;\n            }\n            case \"Quick Sort\": {\n                this.quickSort();\n                break;\n            }\n            default: {\n                console.log(`${algorithm} is invalid`);\n            }\n        }\n    }\n\n    randomizeArray() {\n        const array = [];\n        for (let i = 0; i < numberOfBars; i++) {\n            array.push(randomInt(50, 300));\n        }\n        this.setState({ visualizerArray: array });\n    }\n\n    setAlgorithm = (e) => {\n        selectedAlgorithm = e.target.value;\n        switch (e.target.value) {\n            case \"Bubble Sort\": {\n                document.getElementById(\"overview-title\").innerHTML = \"Bubble Sort\";\n                document.getElementById(\"overview-text\").innerHTML = \"Bubble sort is a simple sorting algorithm that repeatedly swaps adjacent elements if they are in the incorrect order, it is known as bubble sort, because with every complete iteration the largest element in the array, “bubbles up” towards the highest index of that array.\";\n                document.getElementById(\"overview-worst\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n                document.getElementById(\"overview-average\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n                document.getElementById(\"overview-best\").innerHTML = \"O(n)\";\n                document.getElementById(\"overview-space\").innerHTML = \"O(1)\";\n                break;\n            }\n            case \"Selection Sort\": {\n                document.getElementById(\"overview-title\").innerHTML = \"Selection Sort\";\n                document.getElementById(\"overview-text\").innerHTML = \"Selection sort is an in-place comparison-based algorithm in which an array is divided into two parts, the sorted part, and the unsorted part. The smallest element is selected from the unsorted array and swapped with the leftmost element of the unsorted array, that element then becomes a part of the sorted array. This process continues until there are no elements in the unsorted part.\";\n                document.getElementById(\"overview-worst\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n                document.getElementById(\"overview-average\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n                document.getElementById(\"overview-best\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n                document.getElementById(\"overview-space\").innerHTML = \"O(1)\";\n                break;\n            }\n            case \"Insertion Sort\": {\n                document.getElementById(\"overview-title\").innerHTML = \"Insertion Sort\";\n                document.getElementById(\"overview-text\").innerHTML = \"Insertion sort is an in-place comparison-based algorithm that builds the final sorted array one item at a time. At each iteration, insertion sort removes one element from the unsorted array, finds the location it belongs to within the sorted array, and inserts it there. This process repeats until no unsorted elements remain.\";\n                document.getElementById(\"overview-worst\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n                document.getElementById(\"overview-average\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n                document.getElementById(\"overview-best\").innerHTML = \"O(n)\";\n                document.getElementById(\"overview-space\").innerHTML = \"O(1)\";\n                break;\n            }\n            case \"Merge Sort\": {\n                document.getElementById(\"overview-title\").innerHTML = \"Merge Sort\";\n                document.getElementById(\"overview-text\").innerHTML = \"Merge sort is a divide and conquer algorithm that continually divides an array into subarrays, until each subarray is composed of a single element. It then merges those subarrays to produce a sorted array.\";\n                document.getElementById(\"overview-worst\").innerHTML = \"O(n log n)\";\n                document.getElementById(\"overview-average\").innerHTML = \"O(n log n)\";\n                document.getElementById(\"overview-best\").innerHTML = \"O(n log n)\";\n                document.getElementById(\"overview-space\").innerHTML = \"O(n)\";\n                break;\n            }\n            case \"Quick Sort\": {\n                document.getElementById(\"overview-title\").innerHTML = \"Quick Sort\";\n                document.getElementById(\"overview-text\").innerHTML = \"Quick sort is a divide and conquer algorithm. It selects a pivot, and partitions around that pivot, dividing the array into smaller sub-arrays. It continues to do this until the array is sorted.\";\n                document.getElementById(\"overview-worst\").innerHTML = \"O(n\" + \"2\".sup() + \")\";\n                document.getElementById(\"overview-average\").innerHTML = \"O(n log n)\";\n                document.getElementById(\"overview-best\").innerHTML = \"O(n log n)\";\n                document.getElementById(\"overview-space\").innerHTML = \"O(logn)\";\n                break;\n            }\n            default: {\n                console.log(`${e.target.value} is invalid`);\n            }\n        }\n        this.forceUpdate();\n    }\n\n    bubbleSort() {\n        this.randomizeArray();\n        const animations = getBubbleSortAnimations(this.state.visualizerArray);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\n            if (isColorChange) {\n                const color = (i % 4 === 0) ? secondaryColor : primaryColor;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * animationSpeedMS);\n            } else {\n                const [barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * animationSpeedMS);\n            }\n        }\n        const restoreTime = parseInt(animationSpeedMS * animations.length);\n        setTimeout(() => this.setIsSorting(), restoreTime);\n    }\n\n    selectionSort() {\n        this.randomizeArray();\n        const animations = getSelectionSortAnimations(this.state.visualizerArray);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\n            if (isColorChange) {\n                const color = (i % 4 === 0) ? secondaryColor : primaryColor;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * animationSpeedMS);\n            } else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === false) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * animationSpeedMS);\n            }\n        }\n        const restoreTime = parseInt(animationSpeedMS * animations.length);\n        setTimeout(() => this.setIsSorting(), restoreTime);\n    }\n\n    insertionSort() {\n        this.randomizeArray();\n        const animations = getInsertionSortAnimations(this.state.visualizerArray);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\n            if (isColorChange) {\n                const color = (i % 4 === 0) ? secondaryColor : primaryColor;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * animationSpeedMS);\n            } else {\n                const [barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * animationSpeedMS);\n            }\n        }\n        const restoreTime = parseInt(animationSpeedMS * animations.length);\n        setTimeout(() => this.setIsSorting(), restoreTime);\n    }\n\n\n    mergeSort() {\n        this.randomizeArray();\n        const animations = getMergeSortAnimations(this.state.visualizerArray);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                const color = i % 3 === 0 ? secondaryColor : primaryColor;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * animationSpeedMS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIndex, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIndex].style;\n                    barOneStyle.height = `${newHeight}px`;\n                }, i * animationSpeedMS);\n            }\n        }\n        const restoreTime = parseInt(animationSpeedMS * animations.length);\n        setTimeout(() => this.setIsSorting(), restoreTime);\n    }\n\n    quickSort() {\n        this.randomizeArray();\n        const animations = getQuickSortAnimations(this.state.visualizerArray);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\n            if (isColorChange) {\n                const color = (i % 6 === 0) ? secondaryColor : primaryColor;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if (barOneIndex === false) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * animationSpeedMS);\n            } else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === false) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * animationSpeedMS);\n            }\n        }\n        const restoreTime = parseInt(animationSpeedMS * animations.length);\n        setTimeout(() => this.setIsSorting(), restoreTime);\n    }\n\n    setAnimationSpeed = (e, value) => {\n        animationSpeed = value;\n        animationSpeedMS = value * -1 + 101;\n        this.forceUpdate();\n    }\n\n    setNumberOfBars = (e, value) => {\n        numberOfBars = value;\n        this.randomizeArray();\n    }\n\n    setPrimaryColor = (e) => {\n        primaryColor = e.target.value;\n        this.forceUpdate();\n    }\n\n    setThemeMode = (e, value) => {\n        darkMode = value;\n        if (value) {\n            themeMode = \"Dark\";\n        } else {\n            themeMode = \"Light\";\n        }\n        this.forceUpdate();\n    }\n\n    setIsSorting = () => {\n        isSorting = !isSorting;\n        if (isSorting === false) {\n            this.forceUpdate();\n        }\n    }\n\n    render() {\n        const array = this.state.visualizerArray;\n        const white = {\n            color: \"white\"\n        };\n        const primaryThemeColor = {\n            color: `${primaryColor}`\n        }\n        const primaryBackgroundColor = {\n            background: `${primaryColor}`\n        }\n        const darkTheme = createMuiTheme({\n            palette: {\n                type: \"dark\"\n            }\n        });\n        const lightTheme = createMuiTheme({\n            palette: {\n                type: \"light\"\n            }\n        });\n        return (\n            <div>\n                <MuiThemeProvider theme={darkMode ? darkTheme : lightTheme}>\n                    <AppBar style={primaryBackgroundColor} position=\"static\">\n                        <Toolbar>\n                            <Typography variant=\"h6\">Sorting Visualizer</Typography>\n                            <div className=\"theme-section\">\n                                <FormControl disabled={isSorting}>\n                                    <Typography>Select a Color</Typography>\n                                    <Select style={white} value={primaryColor} onChange={this.setPrimaryColor}>\n                                        {colorList.map((index) => <MenuItem value={index} key={index}>{index}</MenuItem>)}\n                                    </Select>\n                                </FormControl>\n                                <div>\n                                    <Typography>{themeMode}</Typography>\n                                    <Switch disabled={isSorting} color=\"secondary\" onChange={this.setThemeMode} />\n                                </div>\n                            </div>\n                        </Toolbar>\n                    </AppBar>\n                    <CssBaseline></CssBaseline>\n                    <Paper elevation={3} className=\"array-container\">\n                        {array.map((value, index) => (\n                            <div\n                                className=\"array-bar\"\n                                key={index}\n                                style={{\n                                    backgroundColor: primaryColor,\n                                    height: `${value}px`,\n                                    width: `${1000 / numberOfBars}px`\n                                }}></div>\n                        ))}\n                    </Paper>\n                    <Grid container>\n                        <Grid item sm={4}>\n                            <Paper elevation={3} className=\"Paper\">\n                                <CardContent>\n                                    <Typography align={\"left\"}>Select a Algorithm</Typography>\n                                    <FormControl className=\"menu-dropdown\" disabled={isSorting}>\n                                        <Select value={selectedAlgorithm} onChange={this.setAlgorithm}>\n                                            {algorithmList.map((index) => <MenuItem value={index} key={index}>{index}</MenuItem>)}\n                                        </Select>\n                                    </FormControl>\n                                    <Typography align={\"left\"}>Speed</Typography>\n                                    <Slider style={primaryThemeColor} value={animationSpeed} onChange={this.setAnimationSpeed} disabled={isSorting} min={1} max={100} valueLabelDisplay=\"auto\" />\n                                    <Typography align={\"left\"}>Number of Bars</Typography>\n                                    <Slider style={primaryThemeColor} value={numberOfBars} onChange={this.setNumberOfBars} disabled={isSorting} min={5} max={150} valueLabelDisplay=\"auto\" />\n                                </CardContent>\n                                <CardActions>\n                                    <div className=\"menu-button\">\n                                        <Button disabled={isSorting} onClick={() => this.sorter(selectedAlgorithm)}>Sort</Button>\n                                    </div>\n                                </CardActions>\n                            </Paper>\n                        </Grid>\n                        <Grid item sm={5}>\n                            <Paper elevation={3} className=\"Paper overview-container\">\n                                <div className=\"overview-section\">\n                                    <Typography><strong id=\"overview-title\">Select an algorithm in the dropdown menu</strong></Typography>\n                                    <Typography id=\"overview-text\"></Typography>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        <Grid item sm={3}>\n                            <Paper elevation={3} className=\"Paper overview-container\">\n                                <div className=\"overview-aside\">\n                                    <Typography>Worst-case time complexity: <span id=\"overview-worst\">N/A</span></Typography>\n                                    <Typography>Average time complexity: <span id=\"overview-average\">N/A</span></Typography>\n                                    <Typography>Best-case time complexity: <span id=\"overview-best\">N/A</span></Typography>\n                                    <Typography>Worst-case space complexity: <span id=\"overview-space\">N/A</span></Typography>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </MuiThemeProvider>\n            </div>\n        );\n    }\n}","export function getBubbleSortAnimations(array) {\n    const animations = [];\n    bubbleSortHelper(array, animations);\n    return animations;\n}\n\nfunction bubbleSortHelper(array, animations) {\n    const n = array.length;\n    let swapped = false;\n    for (let i = 0; i < n - 1; i++) {\n        swapped = false;\n        for (let j = 0; j < n - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                animations.push([j, j + 1]);\n                animations.push([j, j + 1]);\n                animations.push([j, array[j + 1]]);\n                animations.push([j + 1, array[j]]);\n                let temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n                swapped = true;\n            }\n        }\n        if (swapped === false) {\n            break;\n        }\n    }\n}","export function getSelectionSortAnimations(array) {\n    const animations = [];\n    selectionSortHelper(array, animations);\n    return animations;\n}\n\nfunction selectionSortHelper(array, animations) {\n    const n = array.length;\n    for (let i = 0; i < n - 1; i++) {\n        let minIndex = i;\n        let min = array[i];\n        for (let j = i + 1; j < n; j++) {\n            animations.push([i, j]);\n            animations.push([i, j]);\n            animations.push([false, false]);\n            animations.push([false, false]);\n            if (array[j] < min) {\n                min = array[j];\n                minIndex = j;\n            }\n        }\n        animations.push([i, minIndex]);\n        animations.push([i, minIndex]);\n        animations.push([i, min]);\n        animations.push([minIndex, array[i]]);\n        let temp = array[i];\n        array[i] = min;\n        array[minIndex] = temp;\n    }\n}","export function getInsertionSortAnimations(array) {\n    const animations = [];\n    insertionSortHelper(array, animations);\n    return animations;\n}\n\nfunction insertionSortHelper(array, animations) {\n    for (let i = 0; i < array.length; i++) {\n        for (let j = i; j > 0; j--) {\n            if (array[j] < array[j - 1]) {\n                animations.push([j, j - 1]);\n                animations.push([j, j - 1]);\n                animations.push([j, array[j - 1]]);\n                animations.push([j - 1, array[j]]);\n                let temp = array[j];\n                array[j] = array[j - 1];\n                array[j - 1] = temp;\n            }\n        }\n    }\n}","import React from \"react\";\nimport Visualizer from \"./Visualizer/Visualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}